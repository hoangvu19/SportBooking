const sql = require('mssql');
const { poolPromise } = require('../config/db');

async function checkDatabaseStructure() {
  try {
    const pool = await poolPromise;
    
    console.log('\nüìã 1. Ki·ªÉm tra c·ªôt trong b·∫£ng SportField:');
    const sportFieldCols = await pool.request().query(`
      SELECT COLUMN_NAME, DATA_TYPE 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = 'SportField' 
      ORDER BY ORDINAL_POSITION
    `);
    sportFieldCols.recordset.forEach(r => {
      console.log(`  ‚úì ${r.COLUMN_NAME} (${r.DATA_TYPE})`);
    });
    
    console.log('\nüìã 2. Ki·ªÉm tra c·ªôt trong b·∫£ng Booking:');
    const bookingCols = await pool.request().query(`
      SELECT COLUMN_NAME, DATA_TYPE 
      FROM INFORMATION_SCHEMA.COLUMNS 
      WHERE TABLE_NAME = 'Booking' 
      ORDER BY ORDINAL_POSITION
    `);
    bookingCols.recordset.forEach(r => {
      console.log(`  ‚úì ${r.COLUMN_NAME} (${r.DATA_TYPE})`);
    });
    
    console.log('\nüìã 3. L·∫•y m·∫´u 1 s√¢n v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin:');
    const sampleField = await pool.request().query(`
      SELECT TOP 1 
        sf.*, 
        f.FacilityName, 
        st.SportName, 
        a.AreaName,
        a.AreaID
      FROM SportField sf
      JOIN Facility f ON sf.FacilityID = f.FacilityID
      JOIN SportType st ON sf.SportTypeID = st.SportTypeID
      JOIN Area a ON f.AreaID = a.AreaID
      WHERE sf.FieldID = 99
    `);
    console.log('  Th√¥ng tin s√¢n ID 99:');
    const field = sampleField.recordset[0];
    if (field) {
      console.log(`    - FieldID: ${field.FieldID}`);
      console.log(`    - FieldName: ${field.FieldName}`);
      console.log(`    - FieldType: ${field.FieldType}`);
      console.log(`    - FacilityName: ${field.FacilityName}`);
      console.log(`    - SportName: ${field.SportName}`);
      console.log(`    - AreaName: ${field.AreaName}`);
      console.log(`    - AreaID: ${field.AreaID}`);
      console.log(`    - RentalPrice: ${field.RentalPrice}`);
      console.log(`    - Status: ${field.Status}`);
    }
    
    console.log('\nüìã 4. Ki·ªÉm tra booking c·ªßa s√¢n 99 ng√†y h√¥m nay:');
    const bookings = await pool.request().query(`
      SELECT 
        BookingID,
        FieldID,
        StartTime,
        EndTime,
        Status,
        DATEPART(HOUR, StartTime) as StartHour,
        DATEPART(MINUTE, StartTime) as StartMinute
      FROM Booking
      WHERE FieldID = 99 
        AND CAST(StartTime AS DATE) = CAST(GETDATE() AS DATE)
      ORDER BY StartTime
    `);
    if (bookings.recordset.length > 0) {
      console.log(`  ‚úì T√¨m th·∫•y ${bookings.recordset.length} booking:`);
      bookings.recordset.forEach(b => {
        console.log(`    - BookingID ${b.BookingID}: ${b.StartHour}:${b.StartMinute.toString().padStart(2, '0')} - Status: ${b.Status}`);
      });
    } else {
      console.log('  ‚ÑπÔ∏è  Ch∆∞a c√≥ booking n√†o cho s√¢n 99 h√¥m nay');
    }
    
    console.log('\nüìã 5. Ki·ªÉm tra xem c√≥ c·ªôt "Area" ho·∫∑c "Zone" trong SportField kh√¥ng:');
    const hasAreaCol = sportFieldCols.recordset.find(c => 
      c.COLUMN_NAME.toLowerCase().includes('area') || 
      c.COLUMN_NAME.toLowerCase().includes('zone') ||
      c.COLUMN_NAME.toLowerCase().includes('khu')
    );
    if (hasAreaCol) {
      console.log(`  ‚úì C√≥ c·ªôt: ${hasAreaCol.COLUMN_NAME}`);
    } else {
      console.log('  ‚ö†Ô∏è  KH√îNG c√≥ c·ªôt l∆∞u th√¥ng tin khu v·ª±c trong b·∫£ng SportField');
      console.log('  ‚ÑπÔ∏è  Th√¥ng tin khu v·ª±c ƒëang l∆∞u ·ªü b·∫£ng Facility -> Area');
    }
    
    console.log('\nüìã 6. T·ªïng k·∫øt:');
    console.log('  ‚úì Th√¥ng tin KHU V·ª∞C: C√≥ (qua Facility -> Area)');
    console.log('  ‚úì Th√¥ng tin TH·ªúI GIAN: C√≥ (StartTime, EndTime trong Booking)');
    console.log('  ‚úì Th√¥ng tin GI·ªú S√ÇN: C√≥ (t√≠nh t·ª´ StartTime, EndTime)');
    console.log('  ‚ö†Ô∏è  L∆∞u √Ω: Kh√¥ng c√≥ c·ªôt ri√™ng l∆∞u "khu v·ª±c s√¢n" trong SportField');
    console.log('  ‚ÑπÔ∏è  Frontend c·∫ßn t·ª± qu·∫£n l√Ω logic ph√¢n khu A1, A2, B1, B2...');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    process.exit(0);
  }
}

checkDatabaseStructure();
